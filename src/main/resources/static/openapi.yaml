openapi: 3.0.3
info:
  title: TjvHospital
  description: TjvHospital
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
components:
  schemas:
    Doctor:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        emailAddress:
          type: string
        phoneNumber:
          type: string
        patients:
          type: array
          items:
            type: number
        appointments:
          type: array
          items:
            type: number
    Appointment:
      type: object
      properties:
        id:
          type: number
        patient:
          type: number
        doctor:
          type: number
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
    Patient:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        birthdate:
          type: string
          format: date
        emailAddress:
          type: string
        phoneNumber:
          type: string
        doctors:
          type: array
          items:
            type: number
        appointments:
          type: array
          items:
            type: number
paths:
  /appointments:
    description: all appointments
    get:
      description: read all appointments
      responses:
        200:
          description: appointment returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
    post:
      description: add new appointment
      requestBody:
        description: data for new appointment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        200:
          description: successfully added appointment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        409:
          description: duplicate appointment
        400:
          description: invalid dates or non-existent doctor or patient
  /appointments/{id}:
    parameters:
      - name : id
        in: path
        required: true
        description: appointment identifier
        schema:
          type: string
    description: single appointment given by id
    get:
      description: read appointment
      responses:
        200:
          description: appointment read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        404:
          description: appointment not found
    put:
      description: update appointment
      responses:
        200:
          description: appointment updated successfully
        404:
          description: appointment not found
        400:
          description: invalid dates or non-existent doctor/patient
    delete:
      description: delete appointment
      responses:
        200:
          description: appointment deleted successfully
        404:
          description: appointment not found
  /doctors:
    description: all doctors
    get:
      description: read all doctors
      responses:
        200:
          description: doctors read successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
    post:
      description: add new doctor
      requestBody:
        description: data for new doctor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        200:
          description: successfully added doctor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        409:
          description: duplicate doctor
  /doctors/{id}:
    parameters:
      - name : id
        in: path
        required: true
        description: doctor identifier
        schema:
          type: string
    description: single doctor given by id
    get:
      description: read doctor
      responses:
        200:
          description: read all doctor successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
        404:
          description: doctor not found
    put:
      description: update doctor
      responses:
        200:
          description: doctor updated successfully
        404:
          description: doctor not found
    delete:
      description: delete appointment
      responses:
        200:
          description: doctor deleted successfully
        404:
          description: doctor not found
  /patients:
    description: all patients
    get:
      description: read all patients
      responses:
        200:
          description: read all patients successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
    post:
      description: add new patient
      requestBody:
        description: data for new patient
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        200:
          description: successfully added patient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        409:
          description: duplicate patient
  /patients/{id}:
    parameters:
      - name : id
        in: path
        required: true
        description: patient identifier
        schema:
          type: string
    description: single patient given by id
    get:
      description: read patient
      responses:
        200:
          description:
            read patient successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        404:
          description: patient not found
    put:
      description: update patient
      responses:
        200:
          description: patient updated successfully
        404:
          description: patient not found
    delete:
      description: delete patient
      responses:
        200:
          description: patient deleted successfully
        404:
          description: patient not found



  
